


ARM Macro Assembler    Page 1 


    1 00000000         ;/******************************************************
                       ***********************/
    2 00000000         ;/* OSasm.s: low-level OS commands, written in assembly 
                                             */
    3 00000000         ;/* derived from uCOS-II                                
                                             */
    4 00000000         ;/******************************************************
                       ***********************/
    5 00000000         ;Jonathan Valvano, OS Lab2/3/4/5, 1/12/20
    6 00000000         ;Students will implement these functions as part of EE44
                       5M/EE380L.12 Lab
    7 00000000         
    8 00000000                 AREA             |.text|, CODE, READONLY, ALIGN=
2
    9 00000000                 THUMB
   10 00000000                 REQUIRE8
   11 00000000                 PRESERVE8
   12 00000000         
   13 00000000                 EXTERN           RunPt       ; currently running
                                                             thread
   14 00000000                 EXTERN           main_stack_pointer ;where main 
                                                            stack pointer is sa
                                                            ved
   15 00000000         
   16 00000000                 EXPORT           StartOS
   17 00000000                 EXPORT           ContextSwitch
   18 00000000                 EXPORT           PendSV_Handler
   19 00000000                 EXPORT           SVC_Handler
   20 00000000                 EXPORT           Thread_Stack_init
   21 00000000         
   22 00000000 E000ED04 
                       NVIC_INT_CTRL
                               EQU              0xE000ED04  ; Interrupt control
                                                             state register.
   23 00000000 E000ED22 
                       NVIC_SYSPRI14
                               EQU              0xE000ED22  ; PendSV priority r
                                                            egister (position 1
                                                            4).
   24 00000000 E000ED23 
                       NVIC_SYSPRI15
                               EQU              0xE000ED23  ; Systick priority 
                                                            register (position 
                                                            15).
   25 00000000 000000EF 
                       NVIC_LEVEL14
                               EQU              0xEF        ; Systick priority 
                                                            value (second lowes
                                                            t).
   26 00000000 000000FF 
                       NVIC_LEVEL15
                               EQU              0xFF        ; PendSV priority v
                                                            alue (lowest).
   27 00000000 10000000 
                       NVIC_PENDSVSET
                               EQU              0x10000000  ; Value to trigger 
                                                            PendSV exception.
   28 00000000         
   29 00000000         



ARM Macro Assembler    Page 2 


   30 00000000         StartOS
   31 00000000         ; put your code here
   32 00000000 4829            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   33 00000002 6801            LDR              R1, [R0]    ;    R1 = RunPt
   34 00000004 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   35 00000008 E8BD 0FF0       POP              {R4-R11}
   36 0000000C E8BD 100F       POP              {R0-R3, R12} ; 8) restore regs 
                                                            r4-11
   37 00000010 BC01            POP              {R0}
   38 00000012 F85D EB04       POP              {LR}
   39 00000016 BC01            POP              {R0}
   40 00000018 F380 8803       MSR              PSR, R0
   41 0000001C B662            CPSIE            I           ; 9) run with inter
                                                            rupts enabled
   42 0000001E 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   43 00000020         
   44 00000020         
   45 00000020         
   46 00000020         OSStartHang
   47 00000020 E7FE            B                OSStartHang ; Should never get 
                                                            here
   48 00000022         
   49 00000022         
   50 00000022         ;*******************************************************
                       *************************************************
   51 00000022         ;                               PERFORM A CONTEXT SWITCH
                        (From task level)
   52 00000022         ;                                           void Context
                       Switch(void)
   53 00000022         ;
   54 00000022         ; Note(s) : 1) ContextSwitch() is called when OS wants t
                       o perform a task context switch.  This function
   55 00000022         ;              triggers the PendSV exception which is wh
                       ere the real work is done.
   56 00000022         ;*******************************************************
                       *************************************************
   57 00000022         
   58 00000022         ContextSwitch
   59 00000022         ; edit this code
   60 00000022         ;store current stuff
   61 00000022         ;store current stack pointer
   62 00000022         ;stores updated current stack pointer
   63 00000022         ;grab next stack pointer
   64 00000022         ;  LDR r0, [r0, #20] ;loads next TCB pointer into r0, sa
                       me as next->stack_pointer
   65 00000022         ;  LDR r1, [r0]  ;loads the stack pointer from that
   66 00000022         ;  MOVS r1, SP  ;sets stack pointer
   67 00000022         ;pop stuff off stack
   68 00000022         ;----this code is altered from lecture 2 slides----
   69 00000022 B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
   70 00000024 E92D 500F       PUSH             {R0-R3, R12, LR}
   71 00000028 E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
   72 0000002C         ;MRS R0, PSR  ;save PSR to R0
   73 0000002C         ;PUSH {R0}    ;PUSH PSR onto stack



ARM Macro Assembler    Page 3 


   74 0000002C 481E            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
   75 0000002E 6801            LDR              R1, [R0]    ;    R1 = RunPt
   76 00000030 F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
   77 00000034 6849            LDR              R1, [R1,#4] ; 6) R1 = RunPt->ne
                                                            xt
   78 00000036 6001            STR              R1, [R0]    ;    RunPt= R1
   79 00000038 F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
   80 0000003C         ;POP {R0}
   81 0000003C         ;MSR PSR, R0
   82 0000003C E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
   83 00000040 E8BD 500F       POP              {R0-R3, R12, LR}
   84 00000044 B662            CPSIE            I           ; 9) run with inter
                                                            rupts enabled
   85 00000046 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
   86 00000048         
   87 00000048 4770            BX               LR
   88 0000004A         
   89 0000004A         
   90 0000004A         ;*******************************************************
                       *************************************************
   91 0000004A         ;                                         HANDLE PendSV 
                       EXCEPTION
   92 0000004A         ;                                     void OS_CPU_PendSV
                       Handler(void)
   93 0000004A         ;
   94 0000004A         ; Note(s) : 1) PendSV is used to cause a context switch.
                         This is a recommended method for performing
   95 0000004A         ;              context switches with Cortex-M.  This is 
                       because the Cortex-M3 auto-saves half of the
   96 0000004A         ;              processor context on any exception, and r
                       estores same on return from exception.  So only
   97 0000004A         ;              saving of R4-R11 is required and fixing u
                       p the stack pointers.  Using the PendSV exception
   98 0000004A         ;              this way means that context saving and re
                       storing is identical whether it is initiated from
   99 0000004A         ;              a thread or occurs due to an interrupt or
                        exception.
  100 0000004A         ;
  101 0000004A         ;           2) Pseudo-code is:
  102 0000004A         ;              a) Get the process SP, if 0 then skip (go
                       to d) the saving part (first context switch);
  103 0000004A         ;              b) Save remaining regs r4-r11 on process 
                       stack;
  104 0000004A         ;              c) Save the process SP in its TCB, OSTCBC
                       ur->OSTCBStkPtr = SP;
  105 0000004A         ;              d) Call OSTaskSwHook();
  106 0000004A         ;              e) Get current high priority, OSPrioCur =
                        OSPrioHighRdy;
  107 0000004A         ;              f) Get current ready thread TCB, OSTCBCur
                        = OSTCBHighRdy;
  108 0000004A         ;              g) Get new process SP from TCB, SP = OSTC
                       BHighRdy->OSTCBStkPtr;
  109 0000004A         ;              h) Restore R4-R11 from new process stack;
                       



ARM Macro Assembler    Page 4 


  110 0000004A         ;              i) Perform exception return which will re
                       store remaining context.
  111 0000004A         ;
  112 0000004A         ;           3) On entry into PendSV handler:
  113 0000004A         ;              a) The following have been saved on the p
                       rocess stack (by processor):
  114 0000004A         ;                 xPSR, PC, LR, R12, R0-R3
  115 0000004A         ;              b) Processor mode is switched to Handler 
                       mode (from Thread mode)
  116 0000004A         ;              c) Stack is Main stack (switched from Pro
                       cess stack)
  117 0000004A         ;              d) OSTCBCur      points to the OS_TCB of 
                       the task to suspend
  118 0000004A         ;                 OSTCBHighRdy  points to the OS_TCB of 
                       the task to resume
  119 0000004A         ;
  120 0000004A         ;           4) Since PendSV is set to lowest priority in
                        the system (by OSStartHighRdy() above), we
  121 0000004A         ;              know that it will only be run when no oth
                       er exception or interrupt is active, and
  122 0000004A         ;              therefore safe to assume that context bei
                       ng switched out was using the process stack (PSP).
  123 0000004A         ;*******************************************************
                       *************************************************
  124 0000004A         
  125 0000004A         PendSV_Handler
  126 0000004A         ; put your code here
  127 0000004A         
  128 0000004A         ;----this code is altered from lecture 2 slides----
  129 0000004A B672            CPSID            I           ; 2) Prevent interr
                                                            upt during switch
  130 0000004C E92D 0FF0       PUSH             {R4-R11}    ; 3) Save remaining
                                                             regs r4-11
  131 00000050         ;MRS R0, PSR  ;save PSR to R0
  132 00000050         ;PUSH {R0}    ;PUSH PSR onto stack
  133 00000050 4815            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
  134 00000052 6801            LDR              R1, [R0]    ;    R1 = RunPt
  135 00000054 F8C1 D000       STR              SP, [R1]    ; 5) Save SP into T
                                                            CB
  136 00000058 6849            LDR              R1, [R1,#4] ; 6) R1 = RunPt->ne
                                                            xt
  137 0000005A 6001            STR              R1, [R0]    ;    RunPt= R1
  138 0000005C F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
  139 00000060         ;POP {R0}
  140 00000060         ;MSR PSR, R0
  141 00000060 E8BD 0FF0       POP              {R4-R11}    ; 8) restore regs r
                                                            4-11
  142 00000064 B662            CPSIE            I           ; 9) run with inter
                                                            rupts enabled
  143 00000066 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
  144 00000068         
  145 00000068         MainToThread
  146 00000068         ; PUSH {R0-R3, R12, LR}
  147 00000068         ; PUSH {R4-R11}
  148 00000068         ; MRS R0, PSR  ;save PSR to R0
  149 00000068         ; PUSH {R0}    ;PUSH PSR onto stack



ARM Macro Assembler    Page 5 


  150 00000068         ; LDR R0, =main_stack_pointer
  151 00000068         ;STR SP, [R0]   ;store main stack pointer
  152 00000068 480F            LDR              R0, =RunPt  ; 4) R0=pointer to 
                                                            RunPt, old thread
  153 0000006A 6801            LDR              R1, [R0]    ;    R1 = RunPt
  154 0000006C F8D1 D000       LDR              SP, [R1]    ; 7) new thread SP;
                                                             SP = RunPt->sp;
  155 00000070 E8BD 0FF0       POP              {R4-R11}
  156 00000074 E8BD 100F       POP              {R0-R3, R12} ; 8) restore regs 
                                                            r4-11
  157 00000078 BC01            POP              {R0}
  158 0000007A F85D EB04       POP              {LR}
  159 0000007E BC01            POP              {R0}
  160 00000080 F380 8803       MSR              PSR, R0
  161 00000084 B662            CPSIE            I           ; 9) run with inter
                                                            rupts enabled
  162 00000086 4770            BX               LR          ; 10) restore R0-R3
                                                            ,R12,LR,PC,PSR
  163 00000088         
  164 00000088         
  165 00000088         
  166 00000088         ;*******************************************************
                       *************************************************
  167 00000088         ;                                         HANDLE SVC EXC
                       EPTION
  168 00000088         ;                                     void OS_CPU_SVCHan
                       dler(void)
  169 00000088         ;
  170 00000088         ; Note(s) : SVC is a software-triggered exception to mak
                       e OS kernel calls from user land. 
  171 00000088         ;           The function ID to call is encoded in the in
                       struction itself, the location of which can be
  172 00000088         ;           found relative to the return address saved o
                       n the stack on exception entry.
  173 00000088         ;           Function-call paramters in R0..R3 are also a
                       uto-saved on stack on exception entry.
  174 00000088         ;*******************************************************
                       *************************************************
  175 00000088         
  176 00000088                 IMPORT           OS_Id
  177 00000088                 IMPORT           OS_Kill
  178 00000088                 IMPORT           OS_Sleep
  179 00000088                 IMPORT           OS_Time
  180 00000088                 IMPORT           OS_AddThread
  181 00000088         
  182 00000088         SVC_Handler
  183 00000088         ; put your Lab 5 code here
  184 00000088         
  185 00000088         
  186 00000088 4770            BX               LR          ; Return from excep
                                                            tion
  187 0000008A         
  188 0000008A         
  189 0000008A         
  190 0000008A         
  191 0000008A         Thread_Stack_init
  192 0000008A         ;R0 has function pointer address
  193 0000008A         ;PUSH {R0-R3, R12, LR}
  194 0000008A         ;PUSH    {R4-R11}      ; 3) Save remaining regs r4-11



ARM Macro Assembler    Page 6 


  195 0000008A         ;MRS R0, PSR  ;save PSR to R0
  196 0000008A         ;PUSH {R0}    ;PUSH PSR onto stack
  197 0000008A         
  198 0000008A         ; R0 has function pointer address
  199 0000008A         ; R1 holds new stack pointer
  200 0000008A F05F 7280       MOVS             R2, 1<<24
  201 0000008E 600A            STR              R2, [R1]
  202 00000090 3904            SUBS             R1, #4
  203 00000092 6008            STR              R0, [R1]    ;function pointer f
                                                            irst into pc
  204 00000094 3904            SUBS             R1, #4
  205 00000096 F05F 0C0C       MOVS             R12, #12
  206 0000009A 3904            SUBS             R1, #4
  207 0000009C F8C1 C000       STR              R12, [R1]   ;will be R12 on pop
                                                            
  208 000000A0 3930            SUBS             R1, #48
  209 000000A2 0008            MOVS             R0, R1
  210 000000A4         
  211 000000A4 4770            BX               LR
  212 000000A6         
  213 000000A6         ; PUSH {R1}
  214 000000A6         ; MOVS R1, #1
  215 000000A6         ; PUSH {R1}
  216 000000A6         ; MOVS R2, #2
  217 000000A6         ; PUSH {R2}
  218 000000A6         ; MOVS R3, #3
  219 000000A6         ; PUSH {R3}
  220 000000A6         ; MOVS R4, #4
  221 000000A6         ; PUSH {R4}
  222 000000A6         ; MOVS R5, #5
  223 000000A6         ; PUSH {R5}
  224 000000A6         ; MOVS R6, #6
  225 000000A6         ; PUSH {R6}
  226 000000A6         ; MOVS R7, #7
  227 000000A6         ; PUSH {R7}
  228 000000A6         ; MOVS R8, #8
  229 000000A6         ; PUSH {R8}
  230 000000A6         ; MOVS R9, #9
  231 000000A6         ; PUSH {R9}
  232 000000A6         ; MOVS R10, #10
  233 000000A6         ; PUSH {R10}
  234 000000A6         ; MOVS R11, #11
  235 000000A6         ; PUSH {R11}
  236 000000A6         ; MOVS R12, #12
  237 000000A6         ; PUSH {R12}
  238 000000A6         ; PUSH {R0} ; pushes function pointer as Link Register
  239 000000A6         
  240 000000A6         ; MRS R0, PSR
  241 000000A6         ; PUSH {R0}
  242 000000A6         
  243 000000A6 00 00           ALIGN
  244 000000A8                 END
              00000000 
Command Line: --debug --xref --diag_suppress=9931,A1950W --cpu=Cortex-M4 --fpu=
SoftVFP --depend=.\osasm.d -o.\osasm.o -I.\RTE\_Lab2 -IC:\Users\jacob\AppData\L
ocal\Arm\Packs\ARM\CMSIS\6.1.0\CMSIS\Core\Include -IC:\Users\jacob\AppData\Loca
l\Arm\Packs\Keil\TM4C_DFP\1.1.0\Device\Include\TM4C123 --predefine="__EVAL SETA
 1" --predefine="__MICROLIB SETA 1" --predefine="__UVISION_VERSION SETA 541" --
predefine="TM4C123GH6PM SETA 1" --predefine="_RTE_ SETA 1" --list=.\osasm.lst .



ARM Macro Assembler    Page 7 


.\RTOS_Labs_common\osasm.s



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Relocatable symbols

.text 00000000

Symbol: .text
   Definitions
      At line 8 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: .text unused
ContextSwitch 00000022

Symbol: ContextSwitch
   Definitions
      At line 58 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 17 in file ..\RTOS_Labs_common\osasm.s
Comment: ContextSwitch used once
MainToThread 00000068

Symbol: MainToThread
   Definitions
      At line 145 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: MainToThread unused
OSStartHang 00000020

Symbol: OSStartHang
   Definitions
      At line 46 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 47 in file ..\RTOS_Labs_common\osasm.s
Comment: OSStartHang used once
PendSV_Handler 0000004A

Symbol: PendSV_Handler
   Definitions
      At line 125 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 18 in file ..\RTOS_Labs_common\osasm.s
Comment: PendSV_Handler used once
SVC_Handler 00000088

Symbol: SVC_Handler
   Definitions
      At line 182 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 19 in file ..\RTOS_Labs_common\osasm.s
Comment: SVC_Handler used once
StartOS 00000000

Symbol: StartOS
   Definitions
      At line 30 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 16 in file ..\RTOS_Labs_common\osasm.s
Comment: StartOS used once
Thread_Stack_init 0000008A

Symbol: Thread_Stack_init



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
Relocatable symbols

   Definitions
      At line 191 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 20 in file ..\RTOS_Labs_common\osasm.s
Comment: Thread_Stack_init used once
8 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
Absolute symbols

NVIC_INT_CTRL E000ED04

Symbol: NVIC_INT_CTRL
   Definitions
      At line 22 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_INT_CTRL unused
NVIC_LEVEL14 000000EF

Symbol: NVIC_LEVEL14
   Definitions
      At line 25 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL14 unused
NVIC_LEVEL15 000000FF

Symbol: NVIC_LEVEL15
   Definitions
      At line 26 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_LEVEL15 unused
NVIC_PENDSVSET 10000000

Symbol: NVIC_PENDSVSET
   Definitions
      At line 27 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_PENDSVSET unused
NVIC_SYSPRI14 E000ED22

Symbol: NVIC_SYSPRI14
   Definitions
      At line 23 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI14 unused
NVIC_SYSPRI15 E000ED23

Symbol: NVIC_SYSPRI15
   Definitions
      At line 24 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: NVIC_SYSPRI15 unused
6 symbols



ARM Macro Assembler    Page 1 Alphabetic symbol ordering
External symbols

OS_AddThread 00000000

Symbol: OS_AddThread
   Definitions
      At line 180 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_AddThread unused
OS_Id 00000000

Symbol: OS_Id
   Definitions
      At line 176 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Id unused
OS_Kill 00000000

Symbol: OS_Kill
   Definitions
      At line 177 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Kill unused
OS_Sleep 00000000

Symbol: OS_Sleep
   Definitions
      At line 178 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Sleep unused
OS_Time 00000000

Symbol: OS_Time
   Definitions
      At line 179 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: OS_Time unused
RunPt 00000000

Symbol: RunPt
   Definitions
      At line 13 in file ..\RTOS_Labs_common\osasm.s
   Uses
      At line 32 in file ..\RTOS_Labs_common\osasm.s
      At line 74 in file ..\RTOS_Labs_common\osasm.s
      At line 133 in file ..\RTOS_Labs_common\osasm.s
      At line 152 in file ..\RTOS_Labs_common\osasm.s

main_stack_pointer 00000000

Symbol: main_stack_pointer
   Definitions
      At line 14 in file ..\RTOS_Labs_common\osasm.s
   Uses
      None
Comment: main_stack_pointer unused



ARM Macro Assembler    Page 2 Alphabetic symbol ordering
External symbols

7 symbols
358 symbols in table
