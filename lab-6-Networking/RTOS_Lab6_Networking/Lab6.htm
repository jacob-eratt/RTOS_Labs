<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Lab6.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Lab6.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Sun Mar 30 20:32:25 2025
<BR><P>
<H3>Maximum Stack Usage =        772 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
ESP_Interpreter &rArr; executeCommands &rArr; exec_elf &rArr; relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[0]">Reset_Handler</a>
 <LI><a href="#[f8]">DisableInterrupts</a>
 <LI><a href="#[19a]">EnableInterrupts</a>
 <LI><a href="#[d5]">StartCritical</a>
 <LI><a href="#[d6]">EndCritical</a>
 <LI><a href="#[ec]">WaitForInterrupt</a>
 <LI><a href="#[101]">StartOS</a>
 <LI><a href="#[102]">ContextSwitch</a>
 <LI><a href="#[8]">PendSV_Handler</a>
 <LI><a href="#[6]">SVC_Handler</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1]">NMI_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[7]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">DebugMon_Handler</a><BR>
 <LI><a href="#[19]">ADC0Seq1_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[19]">ADC0Seq1_Handler</a><BR>
 <LI><a href="#[140]">send_cmd</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[140]">send_cmd</a><BR>
 <LI><a href="#[13e]">disk_ioctl</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[13e]">disk_ioctl</a><BR>
 <LI><a href="#[121]">UART_OutUDec</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[121]">UART_OutUDec</a><BR>
 <LI><a href="#[118]">fillmessage</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[118]">fillmessage</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[18]">ADC0Seq0_Handler</a> from adct0atrigger.o(.text.ADC0Seq0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[19]">ADC0Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1a]">ADC0Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1b]">ADC0Seq3_Handler</a> from adct0atrigger.o(.text.ADC0Seq3_Handler) referenced from startup.o(RESET)
 <LI><a href="#[3a]">ADC1Seq0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3b]">ADC1Seq1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3c]">ADC1Seq2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3d]">ADC1Seq3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4]">BusFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[31]">CAN0_Handler</a> from can0.o(.text.CAN0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[32]">CAN1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[33]">CAN2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[23]">Comp0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[24]">Comp1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[25]">Comp2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7e]">ESP_Interpreter</a> from interpreter.o(.text.ESP_Interpreter) referenced 2 times from lab6.o(.text.WebServerInterpreter)
 <LI><a href="#[34]">Ethernet_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3f]">ExtBus_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5c]">FPU_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[64]">Fan0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[27]">FlashCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[a]">GPIOPortA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[b]">GPIOPortB_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[c]">GPIOPortC_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[d]">GPIOPortD_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[e]">GPIOPortE_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[28]">GPIOPortF_Handler</a> from os.o(.text.GPIOPortF_Handler) referenced from startup.o(RESET)
 <LI><a href="#[29]">GPIOPortG_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2a]">GPIOPortH_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[40]">GPIOPortJ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[41]">GPIOPortK_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[42]">GPIOPortL_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[61]">GPIOPortM_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[62]">GPIOPortN_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[66]">GPIOPortP1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[67]">GPIOPortP2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[68]">GPIOPortP3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[69]">GPIOPortP4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6a]">GPIOPortP5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6b]">GPIOPortP6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6c]">GPIOPortP7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[65]">GPIOPortP_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6e]">GPIOPortQ1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6f]">GPIOPortQ2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[70]">GPIOPortQ3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[71]">GPIOPortQ4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[72]">GPIOPortQ5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[73]">GPIOPortQ6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[74]">GPIOPortQ7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[6d]">GPIOPortQ_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[75]">GPIOPortR_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[76]">GPIOPortS_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[35]">Hibernate_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[12]">I2C0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2f]">I2C1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4a]">I2C2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4b]">I2C3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5f]">I2C4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[60]">I2C5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3e]">I2S0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[82]">Idle</a> from lab6.o(.text.Idle) referenced 2 times from lab6.o(.text.realmain)
 <LI><a href="#[81]">Interpreter</a> from interpreter.o(.text.Interpreter) referenced 2 times from lab6.o(.text.realmain)
 <LI><a href="#[5e]">LPC0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5d]">PECI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[13]">PWM0Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[14]">PWM0Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[15]">PWM0Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[16]">PWM0Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[37]">PWM0Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7b]">PWM1Fault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[77]">PWM1Generator0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[78]">PWM1Generator1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[79]">PWM1Generator2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[7a]">PWM1Generator3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[17]">Quadrature0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[30]">Quadrature1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[63]">Quadrature2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[11]">SSI0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2c]">SSI1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[43]">SSI2_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[44]">SSI3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[84]">ST7735_Message</a> from st7735.o(.text.ST7735_Message) referenced from interpreter.o(.rodata.symtab)
 <LI><a href="#[6]">SVC_Handler</a> from osasm.o(.text) referenced from startup.o(RESET)
 <LI><a href="#[26]">SysCtl_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from os.o(.text.SysTick_Handler) referenced from startup.o(RESET)
 <LI><a href="#[1d]">Timer0A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1e]">Timer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1f]">Timer1A_Handler</a> from timer1a.o(.text.Timer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[20]">Timer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[21]">Timer2A_Handler</a> from timer2a.o(.text.Timer2A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[22]">Timer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2d]">Timer3A_Handler</a> from timer3a.o(.text.Timer3A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[2e]">Timer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4c]">Timer4A_Handler</a> from timer4a.o(.text.Timer4A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[4d]">Timer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[4e]">Timer5A_Handler</a> from timer5a.o(.text.Timer5A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[4f]">Timer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[f]">UART0_Handler</a> from uart0int.o(.text.UART0_Handler) referenced from startup.o(RESET)
 <LI><a href="#[10]">UART1_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[2b]">UART2_Handler</a> from esp8266.o(.text.UART2_Handler) referenced from startup.o(RESET)
 <LI><a href="#[45]">UART3_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[46]">UART4_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[47]">UART5_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[48]">UART6_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[49]">UART7_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[85]">UART_OutString</a> from uart0int.o(.text.UART_OutString) referenced from interpreter.o(.rodata.symtab)
 <LI><a href="#[36]">USB0_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[1c]">WDT_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[80]">WebServerInterpreter</a> from lab6.o(.text.WebServerInterpreter) referenced 2 times from lab6.o(.text.realmain)
 <LI><a href="#[50]">WideTimer0A_Handler</a> from wtimer0a.o(.text.WideTimer0A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[51]">WideTimer0B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[52]">WideTimer1A_Handler</a> from wtimer1a.o(.text.WideTimer1A_Handler) referenced from startup.o(RESET)
 <LI><a href="#[53]">WideTimer1B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[54]">WideTimer2A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[55]">WideTimer2B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[56]">WideTimer3A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[57]">WideTimer3B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[58]">WideTimer4A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[59]">WideTimer4B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5a]">WideTimer5A_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[5b]">WideTimer5B_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[83]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0sprintf)
 <LI><a href="#[7d]">countMS</a> from os.o(.text.countMS) referenced 2 times from os.o(.text.OS_Init)
 <LI><a href="#[7f]">disk_timerproc</a> from edisk.o(.text.disk_timerproc) referenced 2 times from lab6.o(.text.realmain)
 <LI><a href="#[7c]">main</a> from lab6.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[39]">uDMA_Error</a> from startup.o(RESET) referenced from startup.o(RESET)
 <LI><a href="#[38]">uDMA_Handler</a> from startup.o(RESET) referenced from startup.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>ADC0Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR><BR>[Calls]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq1_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0Seq1_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>ADC0Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>ADC1Seq0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>ADC1Seq1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>ADC1Seq2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>ADC1Seq3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>CAN1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>CAN2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>Comp0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>Comp1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Comp2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>Ethernet_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>ExtBus_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FPU_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>Fan0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>FlashCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>GPIOPortA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>GPIOPortB_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>GPIOPortC_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>GPIOPortD_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>GPIOPortE_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>GPIOPortG_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>GPIOPortH_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>GPIOPortJ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>GPIOPortK_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>GPIOPortL_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPIOPortM_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPIOPortN_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPIOPortP1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPIOPortP2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPIOPortP3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>GPIOPortP4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>GPIOPortP5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>GPIOPortP6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>GPIOPortP7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPIOPortP_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>GPIOPortQ1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>GPIOPortQ2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>GPIOPortQ3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>GPIOPortQ4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>GPIOPortQ5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>GPIOPortQ6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>GPIOPortQ7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>GPIOPortQ_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>GPIOPortR_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>GPIOPortS_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>Hibernate_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>I2C0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>I2C1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>I2C4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>I2C5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>I2S0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>LPC0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>PECI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>PWM0Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>PWM0Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>PWM0Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>PWM0Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>PWM0Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>PWM1Fault_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>PWM1Generator0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>PWM1Generator1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>PWM1Generator2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>PWM1Generator3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>Quadrature0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>Quadrature1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>Quadrature2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>SSI0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>SSI1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SSI2_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>SSI3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>SysCtl_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>Timer0A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>Timer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>Timer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>Timer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>Timer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>Timer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>Timer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>UART1_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>UART3_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>UART4_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>UART5_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>UART6_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>UART7_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USB0_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>WDT_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>WideTimer0B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>WideTimer1B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>WideTimer2A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>WideTimer2B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>WideTimer3A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>WideTimer3B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>WideTimer4A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>WideTimer4B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>WideTimer5A_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>WideTimer5B_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>uDMA_Error</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>uDMA_Handler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(RESET))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reset_Handler
</UL>

<P><STRONG><a name="[194]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[87]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[9a]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[195]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[196]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[197]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[198]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[199]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f8]"></a>DisableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[19a]"></a>EnableInterrupts</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text), UNUSED)

<P><STRONG><a name="[d5]"></a>StartCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddProcess
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAsBlocked
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addThreadBack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[d6]"></a>EndCritical</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddProcess
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addThreadBack
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[ec]"></a>WaitForInterrupt</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Idle
</UL>

<P><STRONG><a name="[101]"></a>StartOS</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[102]"></a>ContextSwitch</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, osasm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = SVC_Handler &rArr; OS_Kill &rArr; Heap_Free &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Time
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Id
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e6]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
</UL>

<P><STRONG><a name="[19b]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[19c]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[e2]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[e4]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[d8]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBuffered
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
</UL>

<P><STRONG><a name="[123]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addressOf
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeInfo
</UL>

<P><STRONG><a name="[e1]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[193]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[8e]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[19e]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[91]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[95]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[96]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[97]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[98]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[190]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[88]"></a>__scatterload</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[19f]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[90]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a0]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[8f]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1a1]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[92]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1a2]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[94]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[93]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[18]"></a>ADC0Seq0_Handler</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, adct0atrigger.o(.text.ADC0Seq0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0Seq0_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>ADC0Seq3_Handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, adct0atrigger.o(.text.ADC0Seq3_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[9c]"></a>ADC0_InSeq3</STRONG> (Thumb, 70 bytes, Stack size 4 bytes, adcswtrigger.o(.text.ADC0_InSeq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = ADC0_InSeq3
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_In
</UL>

<P><STRONG><a name="[9e]"></a>ADC0_InitSWTriggerSeq3</STRONG> (Thumb, 1144 bytes, Stack size 16 bytes, adcswtrigger.o(.text.ADC0_InitSWTriggerSeq3))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC0_InitSWTriggerSeq3
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
</UL>

<P><STRONG><a name="[9b]"></a>ADC_In</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, adc.o(.text.ADC_In))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ADC_In &rArr; ADC0_InSeq3
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_InSeq3
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[9d]"></a>ADC_Init</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Init &rArr; ADC0_InitSWTriggerSeq3
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_InitSWTriggerSeq3
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[31]"></a>CAN0_Handler</STRONG> (Thumb, 186 bytes, Stack size 48 bytes, can0.o(.text.CAN0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CAN0_Handler &rArr; CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[a3]"></a>CAN0_Open</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, can0.o(.text.CAN0_Open))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = CAN0_Open &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Setup_Message_Object
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[a5]"></a>CANBitRateSet</STRONG> (Thumb, 234 bytes, Stack size 48 bytes, can.o(.text.CANBitRateSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = CANBitRateSet &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[a6]"></a>CANEnable</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, can.o(.text.CANEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CANEnable &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[a4]"></a>CANInit</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, can.o(.text.CANInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CANInit &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[a2]"></a>CANIntClear</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, can.o(.text.CANIntClear))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = CANIntClear &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[a7]"></a>CANIntEnable</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, can.o(.text.CANIntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CANIntEnable &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[9f]"></a>CANIntStatus</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, can.o(.text.CANIntStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CANIntStatus &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[a1]"></a>CANMessageGet</STRONG> (Thumb, 650 bytes, Stack size 40 bytes, can.o(.text.CANMessageGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = CANMessageGet &rArr; CANDataRegRead &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[a9]"></a>CANMessageSet</STRONG> (Thumb, 736 bytes, Stack size 40 bytes, can.o(.text.CANMessageSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Setup_Message_Object
</UL>

<P><STRONG><a name="[a0]"></a>CANStatusGet</STRONG> (Thumb, 170 bytes, Stack size 24 bytes, can.o(.text.CANStatusGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = CANStatusGet &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Handler
</UL>

<P><STRONG><a name="[108]"></a>CS_Init</STRONG> (Thumb, 148 bytes, Stack size 0 bytes, edisk.o(.text.CS_Init))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Init
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[127]"></a>Delay1ms</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, st7735.o(.text.Delay1ms))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Delay1ms
</UL>
<BR>[Called By]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
</UL>

<P><STRONG><a name="[cc]"></a>DelayMs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, esp8266.o(.text.DelayMs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[d4]"></a>ESP8266Rx0Fifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266Rx0Fifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266Rx0Fifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
</UL>

<P><STRONG><a name="[bc]"></a>ESP8266Rx0Fifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266Rx0Fifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_CloseTCPConnection
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InitUART
</UL>

<P><STRONG><a name="[106]"></a>ESP8266Rx0Fifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266Rx0Fifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266Rx0Fifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataFilter
</UL>

<P><STRONG><a name="[d3]"></a>ESP8266Rx0Fifo_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266Rx0Fifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
</UL>

<P><STRONG><a name="[c8]"></a>ESP8266RxFifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266RxFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266RxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InChar
</UL>

<P><STRONG><a name="[cf]"></a>ESP8266RxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266RxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InitUART
</UL>

<P><STRONG><a name="[b8]"></a>ESP8266RxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266RxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxToBuffer
</UL>

<P><STRONG><a name="[b6]"></a>ESP8266RxFifo_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266RxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxToBuffer
</UL>

<P><STRONG><a name="[b3]"></a>ESP8266TxFifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266TxFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266BufferToTx
</UL>

<P><STRONG><a name="[ce]"></a>ESP8266TxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266TxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InitUART
</UL>

<P><STRONG><a name="[d1]"></a>ESP8266TxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, esp8266.o(.text.ESP8266TxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ESP8266TxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_OutChar
</UL>

<P><STRONG><a name="[b2]"></a>ESP8266TxFifo_Size</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266TxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266BufferToTx
</UL>

<P><STRONG><a name="[b9]"></a>ESP8266_CloseTCPConnection</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_CloseTCPConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_CloseTCPConnection &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266Rx0Fifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[bd]"></a>ESP8266_Connect</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_Connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ESP8266_Connect &rArr; ESP8266_SetWifiMode &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPAddress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_JoinAccessPoint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_ListAccessPoints
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetWifiMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetMACAddress
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[ca]"></a>ESP8266_DisableInterrupt</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266_DisableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[cd]"></a>ESP8266_EnableInterrupt</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, esp8266.o(.text.ESP8266_EnableInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[c4]"></a>ESP8266_EnableServer</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, esp8266.o(.text.ESP8266_EnableServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_EnableServer &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_StartServer
</UL>

<P><STRONG><a name="[c3]"></a>ESP8266_GetIPAddress</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_GetIPAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_GetIPAddress &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[bf]"></a>ESP8266_GetMACAddress</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_GetMACAddress))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_GetMACAddress &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[c6]"></a>ESP8266_GetVersionNumber</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_GetVersionNumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_GetVersionNumber &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[c7]"></a>ESP8266_InChar</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_InChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESP8266_InChar &rArr; ESP8266RxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
</UL>

<P><STRONG><a name="[c9]"></a>ESP8266_Init</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, esp8266.o(.text.ESP8266_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ESP8266_Init &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutCharNonBlock
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_DisableInterrupt
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_EnableInterrupt
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InitUART
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayMs
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[cb]"></a>ESP8266_InitUART</STRONG> (Thumb, 314 bytes, Stack size 24 bytes, esp8266.o(.text.ESP8266_InitUART))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ESP8266_InitUART
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266TxFifo_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266Rx0Fifo_Init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxFifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>

<P><STRONG><a name="[c2]"></a>ESP8266_JoinAccessPoint</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, esp8266.o(.text.ESP8266_JoinAccessPoint))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ESP8266_JoinAccessPoint &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[c1]"></a>ESP8266_ListAccessPoints</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_ListAccessPoints))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_ListAccessPoints &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[d0]"></a>ESP8266_OutChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266TxFifo_Put
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266BufferToTx
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>

<P><STRONG><a name="[d2]"></a>ESP8266_Receive</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, esp8266.o(.text.ESP8266_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = ESP8266_Receive &rArr; ESP8266_WaitForResponse &rArr; ESP8266_InChar &rArr; ESP8266RxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InChar
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266Rx0Fifo_Size
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266Rx0Fifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[be]"></a>ESP8266_Reset</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = ESP8266_Reset &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[d7]"></a>ESP8266_SendBuffered</STRONG> (Thumb, 186 bytes, Stack size 56 bytes, esp8266.o(.text.ESP8266_SendBuffered))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_SendBuffered &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
</UL>

<P><STRONG><a name="[d9]"></a>ESP8266_SendBufferedStatus</STRONG> (Thumb, 146 bytes, Stack size 64 bytes, esp8266.o(.text.ESP8266_SendBufferedStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ESP8266_SendBufferedStatus &rArr; ESP8266_WaitForResponse &rArr; ESP8266_InChar &rArr; ESP8266RxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
</UL>

<P><STRONG><a name="[ba]"></a>ESP8266_SendCommand</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_SendCommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBuffered
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_CloseTCPConnection
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetVersionNumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetServerTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_EnableServer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetConnectionMux
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPAddress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_JoinAccessPoint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_ListAccessPoints
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetWifiMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetMACAddress
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
</UL>

<P><STRONG><a name="[da]"></a>ESP8266_SetConnectionMux</STRONG> (Thumb, 104 bytes, Stack size 56 bytes, esp8266.o(.text.ESP8266_SetConnectionMux))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_SetConnectionMux &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_StartServer
</UL>

<P><STRONG><a name="[db]"></a>ESP8266_SetServerTimeout</STRONG> (Thumb, 96 bytes, Stack size 56 bytes, esp8266.o(.text.ESP8266_SetServerTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_SetServerTimeout &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_StartServer
</UL>

<P><STRONG><a name="[c0]"></a>ESP8266_SetWifiMode</STRONG> (Thumb, 90 bytes, Stack size 56 bytes, esp8266.o(.text.ESP8266_SetWifiMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = ESP8266_SetWifiMode &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendCommand
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
</UL>

<P><STRONG><a name="[dc]"></a>ESP8266_StartServer</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_StartServer))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ESP8266_StartServer &rArr; ESP8266_SetServerTimeout &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetServerTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_EnableServer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetConnectionMux
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[dd]"></a>ESP8266_WaitForConnection</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266_WaitForConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ESP8266_WaitForConnection &rArr; ESP8266_WaitForResponse &rArr; ESP8266_InChar &rArr; ESP8266RxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForResponse
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[bb]"></a>ESP8266_WaitForResponse</STRONG> (Thumb, 242 bytes, Stack size 40 bytes, esp8266.o(.text.ESP8266_WaitForResponse))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ESP8266_WaitForResponse &rArr; ESP8266_InChar &rArr; ESP8266RxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_InChar
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBufferedStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBuffered
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_CloseTCPConnection
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForConnection
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetVersionNumber
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetServerTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_EnableServer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetConnectionMux
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetIPAddress
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_JoinAccessPoint
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_ListAccessPoints
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetWifiMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetMACAddress
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Reset
</UL>

<P><STRONG><a name="[7e]"></a>ESP_Interpreter</STRONG> (Thumb, 524 bytes, Stack size 40 bytes, interpreter.o(.text.ESP_Interpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = ESP_Interpreter &rArr; executeCommands &rArr; exec_elf &rArr; relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_setID
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Receive
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_CloseTCPConnection
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab6.o(.text.WebServerInterpreter)
</UL>
<P><STRONG><a name="[28]"></a>GPIOPortF_Handler</STRONG> (Thumb, 182 bytes, Stack size 8 bytes, os.o(.text.GPIOPortF_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIOPortF_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>HTTP_ServePage</STRONG> (Thumb, 126 bytes, Stack size 120 bytes, lab6.o(.text.HTTP_ServePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = HTTP_ServePage &rArr; ESP8266_SendBuffered &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBufferedStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBuffered
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[e7]"></a>Heap_Free</STRONG> (Thumb, 778 bytes, Stack size 72 bytes, heap.o(.text.Heap_Free))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = Heap_Free &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSection
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSegment
</UL>

<P><STRONG><a name="[e9]"></a>Heap_Init</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, heap.o(.text.Heap_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Heap_Init &rArr; OS_InitSemaphore
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[eb]"></a>Heap_Malloc</STRONG> (Thumb, 318 bytes, Stack size 48 bytes, heap.o(.text.Heap_Malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = Heap_Malloc &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
</UL>

<P><STRONG><a name="[166]"></a>IRDistance_Convert</STRONG> (Thumb, 94 bytes, Stack size 12 bytes, irdistance.o(.text.IRDistance_Convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = IRDistance_Convert
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[82]"></a>Idle</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lab6.o(.text.Idle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Idle
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WaitForInterrupt
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab6.o(.text.realmain)
</UL>
<P><STRONG><a name="[af]"></a>IntDisable</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, interrupt.o(.text.IntDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IntDisable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[b0]"></a>IntEnable</STRONG> (Thumb, 160 bytes, Stack size 4 bytes, interrupt.o(.text.IntEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IntEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[81]"></a>Interpreter</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, interpreter.o(.text.Interpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = Interpreter &rArr; executeCommands &rArr; exec_elf &rArr; relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_setID
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab6.o(.text.realmain)
</UL>
<P><STRONG><a name="[178]"></a>LOADER_CLEAR</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, loader.o(.text.LOADER_CLEAR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LOADER_CLEAR
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElf
</UL>

<P><STRONG><a name="[ee]"></a>LOADER_OPEN_FOR_RD</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, loader.o(.text.LOADER_OPEN_FOR_RD))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = LOADER_OPEN_FOR_RD &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[f0]"></a>LOADER_READ</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, loader.o(.text.LOADER_READ))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbolName
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbol
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSectionName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSecHeader
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeDynamic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSegHeader
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElf
</UL>

<P><STRONG><a name="[f2]"></a>OS_AddPeriodicThread</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, os.o(.text.OS_AddPeriodicThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 36 + Unknown Stack Size
<LI>Call Chain = OS_AddPeriodicThread &rArr; WideTimer1A_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WideTimer1A_Init
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer5A_Init
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[f5]"></a>OS_AddProcess</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, os.o(.text.OS_AddProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = OS_AddProcess &rArr; OS_AddThread &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpTo
</UL>

<P><STRONG><a name="[8d]"></a>OS_AddThread</STRONG> (Thumb, 736 bytes, Stack size 48 bytes, os.o(.text.OS_AddThread))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = OS_AddThread &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addThreadBack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddProcess
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[168]"></a>OS_ClearMsTime</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os.o(.text.OS_ClearMsTime))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[89]"></a>OS_Id</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, os.o(.text.OS_Id))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[f7]"></a>OS_Init</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, os.o(.text.OS_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = OS_Init &rArr; ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WideTimer0A_Init
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PFGeneralInit
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PLL_Init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DisableInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[ea]"></a>OS_InitSemaphore</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, os.o(.text.OS_InitSemaphore))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[8a]"></a>OS_Kill</STRONG> (Thumb, 242 bytes, Stack size 16 bytes, os.o(.text.OS_Kill))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = OS_Kill &rArr; Heap_Free &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[ff]"></a>OS_Launch</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, os.o(.text.OS_Launch))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = OS_Launch &rArr; SysTick_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartOS
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[167]"></a>OS_MsTime</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, os.o(.text.OS_MsTime))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[e0]"></a>OS_Signal</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, os.o(.text.OS_Signal))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = OS_Signal &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addThreadBack
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[8b]"></a>OS_Sleep</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, os.o(.text.OS_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = OS_Sleep &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[fe]"></a>OS_Suspend</STRONG> (Thumb, 188 bytes, Stack size 16 bytes, os.o(.text.OS_Suspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContextSwitch
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Sleep
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAsBlocked
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
</UL>

<P><STRONG><a name="[8c]"></a>OS_Time</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, os.o(.text.OS_Time))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>

<P><STRONG><a name="[e8]"></a>OS_Wait</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, os.o(.text.OS_Wait))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAsBlocked
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[104]"></a>OS_bSignal</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(.text.OS_bSignal))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = OS_bSignal &rArr; OS_Signal &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Unmount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_RClose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DClose
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DirNext
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DOpen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Mount
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_MessageNoVal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[105]"></a>OS_bWait</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, os.o(.text.OS_bWait))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = OS_bWait &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Unmount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_RClose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DClose
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DirNext
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DOpen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Mount
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_MessageNoVal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[de]"></a>OS_setID</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, os.o(.text.OS_setID))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = OS_setID
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interpreter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[fb]"></a>PFGeneralInit</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, edgeinterruptportf.o(.text.PFGeneralInit))
<BR><BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[fd]"></a>PLL_Init</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, pll.o(.text.PLL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PLL_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[187]"></a>PortD_Init</STRONG> (Thumb, 120 bytes, Stack size 0 bytes, lab6.o(.text.PortD_Init))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>

<P><STRONG><a name="[b7]"></a>ReceiveDataFilter</STRONG> (Thumb, 574 bytes, Stack size 16 bytes, esp8266.o(.text.ReceiveDataFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ReceiveDataFilter &rArr; ESP8266Rx0Fifo_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266Rx0Fifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxToBuffer
</UL>

<P><STRONG><a name="[11c]"></a>RxFifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fifosimple.o(.text.RxFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_InChar
</UL>

<P><STRONG><a name="[11d]"></a>RxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.RxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[129]"></a>RxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fifosimple.o(.text.RxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[128]"></a>RxFifo_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.RxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
</UL>

<P><STRONG><a name="[107]"></a>SSI0_Init</STRONG> (Thumb, 350 bytes, Stack size 16 bytes, edisk.o(.text.SSI0_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SSI0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>

<P><STRONG><a name="[109]"></a>ST7735_DrawCharS</STRONG> (Thumb, 438 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_DrawCharS))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>

<P><STRONG><a name="[10a]"></a>ST7735_DrawPixel</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_DrawPixel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ST7735_DrawPixel &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>

<P><STRONG><a name="[df]"></a>ST7735_DrawString</STRONG> (Thumb, 154 bytes, Stack size 40 bytes, st7735.o(.text.ST7735_DrawString))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_MessageNoVal
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WebServerInterpreter
</UL>

<P><STRONG><a name="[10b]"></a>ST7735_FillRect</STRONG> (Thumb, 318 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_FillRect))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
</UL>

<P><STRONG><a name="[10f]"></a>ST7735_FillScreen</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_FillScreen))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[f9]"></a>ST7735_InitR</STRONG> (Thumb, 180 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_InitR))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ST7735_InitR &rArr; ST7735_FillScreen &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillScreen
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_SetCursor
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[84]"></a>ST7735_Message</STRONG> (Thumb, 318 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_Message))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = ST7735_Message &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interpreter.o(.rodata.symtab)
</UL>
<P><STRONG><a name="[116]"></a>ST7735_MessageNoVal</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_MessageNoVal))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = ST7735_MessageNoVal &rArr; ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[117]"></a>ST7735_OutChar</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, st7735.o(.text.ST7735_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutString
</UL>

<P><STRONG><a name="[114]"></a>ST7735_OutString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, st7735.o(.text.ST7735_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ST7735_OutString &rArr; ST7735_OutChar &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_MessageNoVal
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[115]"></a>ST7735_OutUDec</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, st7735.o(.text.ST7735_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = ST7735_OutUDec &rArr; ST7735_DrawString &rArr; ST7735_DrawCharS &rArr; ST7735_FillRect &rArr; setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawCharS
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
</UL>

<P><STRONG><a name="[113]"></a>ST7735_SetCursor</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, st7735.o(.text.ST7735_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ST7735_SetCursor
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 260 bytes, Stack size 8 bytes, os.o(.text.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = SysTick_Handler &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addThreadBack
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[100]"></a>SysTick_Init</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, os.o(.text.SysTick_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SysTick_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
</UL>

<P><STRONG><a name="[1f]"></a>Timer1A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer1a.o(.text.Timer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>Timer2A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer2a.o(.text.Timer2A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer2A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>Timer3A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer3a.o(.text.Timer3A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer3A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>Timer4A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer4a.o(.text.Timer4A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer4A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>Timer5A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, timer5a.o(.text.Timer5A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer5A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>Timer5A_Init</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, timer5a.o(.text.Timer5A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Timer5A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
</UL>

<P><STRONG><a name="[12a]"></a>TxFifo_Get</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, fifosimple.o(.text.TxFifo_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[11e]"></a>TxFifo_Init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.TxFifo_Init))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
</UL>

<P><STRONG><a name="[120]"></a>TxFifo_Put</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, fifosimple.o(.text.TxFifo_Put))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutCharNonBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[11a]"></a>TxFifo_Size</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, fifosimple.o(.text.TxFifo_Size))
<BR><BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>

<P><STRONG><a name="[f]"></a>UART0_Handler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, uart0int.o(.text.UART0_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UART0_Handler &rArr; copyHardwareToSoftware &rArr; RxFifo_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copyHardwareToSoftware
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>UART2_Handler</STRONG> (Thumb, 138 bytes, Stack size 8 bytes, esp8266.o(.text.UART2_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = UART2_Handler &rArr; ESP8266RxToBuffer &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266TxFifo_Size
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxToBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266BufferToTx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[ed]"></a>UART_InChar</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, uart0int.o(.text.UART_InChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = UART_InChar &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Get
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interpreter
</UL>

<P><STRONG><a name="[fa]"></a>UART_Init</STRONG> (Thumb, 234 bytes, Stack size 8 bytes, uart0int.o(.text.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[11f]"></a>UART_OutChar</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart0int.o(.text.UART_OutChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_OutChar &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Put
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[b4]"></a>UART_OutCharNonBlock</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, uart0int.o(.text.UART_OutCharNonBlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Put
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copySoftwareToHardware
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxToBuffer
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266BufferToTx
</UL>

<P><STRONG><a name="[85]"></a>UART_OutString</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, uart0int.o(.text.UART_OutString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = UART_OutString &rArr; UART_OutChar &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSection
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpTo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateProgram
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProgram
</UL>
<BR>[Address Reference Count : 1]<UL><LI> interpreter.o(.rodata.symtab)
</UL>
<P><STRONG><a name="[121]"></a>UART_OutUDec</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, uart0int.o(.text.UART_OutUDec))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = UART_OutUDec &rArr;  UART_OutUDec (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[80]"></a>WebServerInterpreter</STRONG> (Thumb, 216 bytes, Stack size 8 bytes, lab6.o(.text.WebServerInterpreter))
<BR><BR>[Stack]<UL><LI>Max Depth = 168 + Unknown Stack Size
<LI>Call Chain = WebServerInterpreter &rArr; ESP8266_StartServer &rArr; ESP8266_SetServerTimeout &rArr; ESP8266_SendCommand &rArr; ESP8266_OutChar &rArr; ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_WaitForConnection
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_StartServer
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Connect
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_GetVersionNumber
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Kill
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawString
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab6.o(.text.realmain)
</UL>
<P><STRONG><a name="[50]"></a>WideTimer0A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wtimer0a.o(.text.WideTimer0A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer0A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>WideTimer0A_Init</STRONG> (Thumb, 170 bytes, Stack size 12 bytes, wtimer0a.o(.text.WideTimer0A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WideTimer0A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
</UL>

<P><STRONG><a name="[52]"></a>WideTimer1A_Handler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, wtimer1a.o(.text.WideTimer1A_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WideTimer1A_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(RESET)
</UL>
<P><STRONG><a name="[f4]"></a>WideTimer1A_Init</STRONG> (Thumb, 166 bytes, Stack size 12 bytes, wtimer1a.o(.text.WideTimer1A_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = WideTimer1A_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
</UL>

<P><STRONG><a name="[f6]"></a>addThreadBack</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, os.o(.text.addThreadBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EndCritical
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Signal
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
</UL>

<P><STRONG><a name="[139]"></a>clust2sect</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, ff.o(.text.clust2sect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[7d]"></a>countMS</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, os.o(.text.countMS))
<BR>[Address Reference Count : 1]<UL><LI> os.o(.text.OS_Init)
</UL>
<P><STRONG><a name="[13e]"></a>disk_ioctl</STRONG> (Thumb, 724 bytes, Stack size 56 bytes, edisk.o(.text.disk_ioctl))
<BR><BR>[Stack]<UL><LI>Max Depth = 124 + In Cycle
<LI>Call Chain = disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
</UL>

<P><STRONG><a name="[7f]"></a>disk_timerproc</STRONG> (Thumb, 142 bytes, Stack size 4 bytes, edisk.o(.text.disk_timerproc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = disk_timerproc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lab6.o(.text.realmain)
</UL>
<P><STRONG><a name="[143]"></a>eDisk_Init</STRONG> (Thumb, 612 bytes, Stack size 32 bytes, edisk.o(.text.eDisk_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = eDisk_Init &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[145]"></a>eDisk_Read</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, edisk.o(.text.eDisk_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eDisk_Read &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[175]"></a>eDisk_Status</STRONG> (Thumb, 46 bytes, Stack size 4 bytes, edisk.o(.text.eDisk_Status))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = eDisk_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[146]"></a>eDisk_Write</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, edisk.o(.text.eDisk_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[148]"></a>eFile_Create</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, efile.o(.text.eFile_Create))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = eFile_Create &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[149]"></a>eFile_DClose</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, efile.o(.text.eFile_DClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = eFile_DClose &rArr; OS_bWait &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[14b]"></a>eFile_DOpen</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, efile.o(.text.eFile_DOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = eFile_DOpen &rArr; f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[14d]"></a>eFile_Delete</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, efile.o(.text.eFile_Delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = eFile_Delete &rArr; f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[14f]"></a>eFile_DirNext</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, efile.o(.text.eFile_DirNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 348 + Unknown Stack Size
<LI>Call Chain = eFile_DirNext &rArr; f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[151]"></a>eFile_Format</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, efile.o(.text.eFile_Format))
<BR><BR>[Stack]<UL><LI>Max Depth = 260 + Unknown Stack Size
<LI>Call Chain = eFile_Format &rArr; f_mkfs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[169]"></a>eFile_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, efile.o(.text.eFile_Init))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[153]"></a>eFile_Mount</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, efile.o(.text.eFile_Mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = eFile_Mount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[155]"></a>eFile_RClose</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, efile.o(.text.eFile_RClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = eFile_RClose &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[157]"></a>eFile_ROpen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, efile.o(.text.eFile_ROpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = eFile_ROpen &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[158]"></a>eFile_ReadNext</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, efile.o(.text.eFile_ReadNext))
<BR><BR>[Stack]<UL><LI>Max Depth = 268 + Unknown Stack Size
<LI>Call Chain = eFile_ReadNext &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[159]"></a>eFile_Unmount</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, efile.o(.text.eFile_Unmount))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = eFile_Unmount &rArr; f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[15a]"></a>eFile_WClose</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, efile.o(.text.eFile_WClose))
<BR><BR>[Stack]<UL><LI>Max Depth = 212 + Unknown Stack Size
<LI>Call Chain = eFile_WClose &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[15b]"></a>eFile_WOpen</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, efile.o(.text.eFile_WOpen))
<BR><BR>[Stack]<UL><LI>Max Depth = 428 + Unknown Stack Size
<LI>Call Chain = eFile_WOpen &rArr; f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[15c]"></a>eFile_Write</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, efile.o(.text.eFile_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 308 + Unknown Stack Size
<LI>Call Chain = eFile_Write &rArr; f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bSignal
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_bWait
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[15e]"></a>exec_elf</STRONG> (Thumb, 298 bytes, Stack size 40 bytes, loader.o(.text.exec_elf))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = exec_elf &rArr; relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_OPEN_FOR_RD
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSections
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeElf
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;jumpTo
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateProgram
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProgram
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElf
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;executeCommands
</UL>

<P><STRONG><a name="[e5]"></a>executeCommands</STRONG> (Thumb, 1326 bytes, Stack size 56 bytes, interpreter.o(.text.executeCommands))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = executeCommands &rArr; exec_elf &rArr; relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Unmount
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_RClose
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DClose
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutUDec
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DirNext
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DOpen
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Mount
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Init
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IRDistance_Convert
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_In
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_MessageNoVal
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_ClearMsTime
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_MsTime
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_Message
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Interpreter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP_Interpreter
</UL>

<P><STRONG><a name="[156]"></a>f_close</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, ff.o(.text.f_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_RClose
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WClose
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeElf
</UL>

<P><STRONG><a name="[14a]"></a>f_closedir</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(.text.f_closedir))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = f_closedir &rArr; validate &rArr; eDisk_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DClose
</UL>

<P><STRONG><a name="[16c]"></a>f_lseek</STRONG> (Thumb, 646 bytes, Stack size 40 bytes, ff.o(.text.f_lseek))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = f_lseek &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbolName
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbol
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSectionName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSecHeader
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeDynamic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSegHeader
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initElf
</UL>

<P><STRONG><a name="[152]"></a>f_mkfs</STRONG> (Thumb, 2182 bytes, Stack size 120 bytes, ff.o(.text.f_mkfs))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = f_mkfs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Format
</UL>

<P><STRONG><a name="[154]"></a>f_mount</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, ff.o(.text.f_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = f_mount &rArr; find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Unmount
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Mount
</UL>

<P><STRONG><a name="[ef]"></a>f_open</STRONG> (Thumb, 600 bytes, Stack size 88 bytes, ff.o(.text.f_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = f_open &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ROpen
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_WOpen
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Create
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_OPEN_FOR_RD
</UL>

<P><STRONG><a name="[14c]"></a>f_opendir</STRONG> (Thumb, 212 bytes, Stack size 40 bytes, ff.o(.text.f_opendir))
<BR><BR>[Stack]<UL><LI>Max Depth = 364<LI>Call Chain = f_opendir &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DOpen
</UL>

<P><STRONG><a name="[f1]"></a>f_read</STRONG> (Thumb, 642 bytes, Stack size 64 bytes, ff.o(.text.f_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_ReadNext
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>

<P><STRONG><a name="[150]"></a>f_readdir</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, ff.o(.text.f_readdir))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = f_readdir &rArr; dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fileinfo
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
</UL>
<BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_DirNext
</UL>

<P><STRONG><a name="[16a]"></a>f_sync</STRONG> (Thumb, 276 bytes, Stack size 32 bytes, ff.o(.text.f_sync))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_clust
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>

<P><STRONG><a name="[14e]"></a>f_unlink</STRONG> (Thumb, 358 bytes, Stack size 96 bytes, ff.o(.text.f_unlink))
<BR><BR>[Stack]<UL><LI>Max Depth = 420<LI>Call Chain = f_unlink &rArr; follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Delete
</UL>

<P><STRONG><a name="[15d]"></a>f_write</STRONG> (Thumb, 734 bytes, Stack size 56 bytes, ff.o(.text.f_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = f_write &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;validate
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eFile_Write
</UL>

<P><STRONG><a name="[118]"></a>fillmessage</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, st7735.o(.text.fillmessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = fillmessage &rArr;  fillmessage (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_OutUDec
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fillmessage
</UL>

<P><STRONG><a name="[12c]"></a>get_fat</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, ff.o(.text.get_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
</UL>

<P><STRONG><a name="[7c]"></a>main</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lab6.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 196 + Unknown Stack Size
<LI>Call Chain = main &rArr; realmain &rArr; CAN0_Open &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realmain
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[12d]"></a>put_fat</STRONG> (Thumb, 456 bytes, Stack size 48 bytes, ff.o(.text.put_fat))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_chain
</UL>

<P><STRONG><a name="[181]"></a>realmain</STRONG> (Thumb, 192 bytes, Stack size 24 bytes, lab6.o(.text.realmain))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = realmain &rArr; CAN0_Open &rArr; CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Launch
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddPeriodicThread
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_InitSemaphore
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddThread
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PortD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[103]"></a>setAsBlocked</STRONG> (Thumb, 296 bytes, Stack size 32 bytes, os.o(.text.setAsBlocked))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Suspend
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StartCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_Wait
</UL>

<P><STRONG><a name="[18d]"></a>__0sprintf</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1a3]"></a>__1sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a4]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[1a5]"></a>__c89sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf), UNUSED)

<P><STRONG><a name="[c5]"></a>sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0sprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBufferedStatus
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SendBuffered
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HTTP_ServePage
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetServerTimeout
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_EnableServer
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetConnectionMux
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_SetWifiMode
</UL>

<P><STRONG><a name="[1a6]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1a7]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1a8]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[110]"></a>commonInit</STRONG> (Thumb, 422 bytes, Stack size 48 bytes, st7735.o(.text.commonInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = commonInit &rArr; commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_Init
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[111]"></a>commandList</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, st7735.o(.text.commandList))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = commandList &rArr; Delay1ms
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay1ms
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commonInit
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[112]"></a>writecommand</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, st7735.o(.text.writecommand))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[10e]"></a>writedata</STRONG> (Thumb, 128 bytes, Stack size 8 bytes, st7735.o(.text.writedata))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pushColor
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setAddrWindow
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;commandList
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_InitR
</UL>

<P><STRONG><a name="[10c]"></a>setAddrWindow</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, st7735.o(.text.setAddrWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = setAddrWindow &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writecommand
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_FillRect
</UL>

<P><STRONG><a name="[10d]"></a>pushColor</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, st7735.o(.text.pushColor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = pushColor &rArr; writedata
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writedata
</UL>
<BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ST7735_DrawPixel
</UL>

<P><STRONG><a name="[119]"></a>copySoftwareToHardware</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, uart0int.o(.text.copySoftwareToHardware))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Get
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TxFifo_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutCharNonBlock
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutChar
</UL>

<P><STRONG><a name="[11b]"></a>copyHardwareToSoftware</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, uart0int.o(.text.copyHardwareToSoftware))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = copyHardwareToSoftware &rArr; RxFifo_Put
</UL>
<BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Put
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RxFifo_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART0_Handler
</UL>

<P><STRONG><a name="[144]"></a>init_spi</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, edisk.o(.text.init_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = init_spi &rArr; SSI0_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SSI0_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>

<P><STRONG><a name="[132]"></a>xchg_spi</STRONG> (Thumb, 86 bytes, Stack size 4 bytes, edisk.o(.text.xchg_spi))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[140]"></a>send_cmd</STRONG> (Thumb, 296 bytes, Stack size 24 bytes, edisk.o(.text.send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68 + In Cycle
<LI>Call Chain = send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[131]"></a>deselect</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, edisk.o(.text.deselect))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = deselect &rArr; xchg_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[13f]"></a>select</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, edisk.o(.text.select))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = select &rArr; wait_ready &rArr; xchg_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;deselect
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_cmd
</UL>

<P><STRONG><a name="[141]"></a>rcvr_datablock</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, edisk.o(.text.rcvr_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = rcvr_datablock &rArr; rcvr_spi_multi
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_multi
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>

<P><STRONG><a name="[182]"></a>rcvr_spi_multi</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, edisk.o(.text.rcvr_spi_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = rcvr_spi_multi
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_datablock
</UL>

<P><STRONG><a name="[147]"></a>xmit_datablock</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, edisk.o(.text.xmit_datablock))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = xmit_datablock &rArr; wait_ready &rArr; xchg_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_spi_multi
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_ready
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>

<P><STRONG><a name="[142]"></a>wait_ready</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, edisk.o(.text.wait_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = wait_ready &rArr; xchg_spi
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xchg_spi
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;select
</UL>

<P><STRONG><a name="[18c]"></a>xmit_spi_multi</STRONG> (Thumb, 82 bytes, Stack size 12 bytes, edisk.o(.text.xmit_spi_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = xmit_spi_multi
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xmit_datablock
</UL>

<P><STRONG><a name="[183]"></a>rcvr_spi</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, edisk.o(.text.rcvr_spi))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rcvr_spi_multi
</UL>

<P><STRONG><a name="[126]"></a>move_window</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ff.o(.text.move_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[138]"></a>sync_window</STRONG> (Thumb, 138 bytes, Stack size 24 bytes, ff.o(.text.sync_window))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>

<P><STRONG><a name="[16d]"></a>get_ldnumber</STRONG> (Thumb, 170 bytes, Stack size 28 bytes, ff.o(.text.get_ldnumber))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = get_ldnumber
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[16e]"></a>find_volume</STRONG> (Thumb, 1160 bytes, Stack size 104 bytes, ff.o(.text.find_volume))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = find_volume &rArr; check_fs &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_fs
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_ldnumber
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Status
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mount
</UL>

<P><STRONG><a name="[125]"></a>check_fs</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, ff.o(.text.check_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = check_fs &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_volume
</UL>

<P><STRONG><a name="[16f]"></a>follow_path</STRONG> (Thumb, 284 bytes, Stack size 32 bytes, ff.o(.text.follow_path))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = follow_path &rArr; dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[13b]"></a>dir_register</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, ff.o(.text.dir_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = dir_register &rArr; dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cpy
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[170]"></a>ld_clust</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, ff.o(.text.ld_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ld_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[171]"></a>st_clust</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ff.o(.text.st_clust))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_clust
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[172]"></a>remove_chain</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text.remove_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = remove_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_open
</UL>

<P><STRONG><a name="[134]"></a>dir_sdi</STRONG> (Thumb, 286 bytes, Stack size 32 bytes, ff.o(.text.dir_sdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_opendir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[12e]"></a>create_name</STRONG> (Thumb, 798 bytes, Stack size 48 bytes, ff.o(.text.create_name))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = create_name &rArr; mem_set
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;chk_chr
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[136]"></a>dir_find</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, ff.o(.text.dir_find))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_find &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_cmp
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;follow_path
</UL>

<P><STRONG><a name="[133]"></a>dir_alloc</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, ff.o(.text.dir_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_alloc &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
</UL>

<P><STRONG><a name="[12f]"></a>mem_set</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, ff.o(.text.mem_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mem_set
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_remove
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_fs
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[13c]"></a>mem_cpy</STRONG> (Thumb, 50 bytes, Stack size 20 bytes, ff.o(.text.mem_cpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = mem_cpy
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_register
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_mkfs
</UL>

<P><STRONG><a name="[16b]"></a>validate</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, ff.o(.text.validate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = validate &rArr; eDisk_Status
</UL>
<BR>[Calls]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Status
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_closedir
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_read
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[12b]"></a>create_chain</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, ff.o(.text.create_chain))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;put_fat
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_write
</UL>

<P><STRONG><a name="[174]"></a>sync_fs</STRONG> (Thumb, 268 bytes, Stack size 24 bytes, ff.o(.text.sync_fs))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disk_ioctl
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eDisk_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_sync
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[13a]"></a>dir_read</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, ff.o(.text.dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = dir_read &rArr; dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_next
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[135]"></a>dir_next</STRONG> (Thumb, 448 bytes, Stack size 40 bytes, ff.o(.text.dir_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = dir_next &rArr; create_chain &rArr; put_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_fat
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clust2sect
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_chain
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sync_window
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_read
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_alloc
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[173]"></a>get_fileinfo</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, ff.o(.text.get_fileinfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_fileinfo
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_readdir
</UL>

<P><STRONG><a name="[13d]"></a>dir_remove</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, ff.o(.text.dir_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = dir_remove &rArr; dir_sdi &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_set
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_sdi
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;move_window
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_unlink
</UL>

<P><STRONG><a name="[130]"></a>chk_chr</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, ff.o(.text.chk_chr))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = chk_chr
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;create_name
</UL>

<P><STRONG><a name="[137]"></a>mem_cmp</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, ff.o(.text.mem_cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = mem_cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dir_find
</UL>

<P><STRONG><a name="[15f]"></a>initElf</STRONG> (Thumb, 180 bytes, Stack size 112 bytes, loader.o(.text.initElf))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = initElf &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_CLEAR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[160]"></a>loadProgram</STRONG> (Thumb, 252 bytes, Stack size 64 bytes, loader.o(.text.loadProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 380 + Unknown Stack Size
<LI>Call Chain = loadProgram &rArr; placeDynamic &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeDynamic
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSegHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[161]"></a>relocateProgram</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, loader.o(.text.relocateProgram))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = relocateProgram &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[162]"></a>jumpTo</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, loader.o(.text.jumpTo))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = jumpTo &rArr; OS_AddProcess &rArr; OS_AddThread &rArr; addThreadBack
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OS_AddProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[163]"></a>freeElf</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, loader.o(.text.freeElf))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = freeElf &rArr; f_close &rArr; f_sync &rArr; sync_fs &rArr; disk_ioctl &rArr;  disk_ioctl (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_close
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[164]"></a>loadSymbols</STRONG> (Thumb, 192 bytes, Stack size 104 bytes, loader.o(.text.loadSymbols))
<BR><BR>[Stack]<UL><LI>Max Depth = 436 + Unknown Stack Size
<LI>Call Chain = loadSymbols &rArr; placeInfo &rArr; loadSecData &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeInfo
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSectionName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSecHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[165]"></a>relocateSections</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, loader.o(.text.relocateSections))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = relocateSections &rArr; relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSection
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exec_elf
</UL>

<P><STRONG><a name="[179]"></a>readSegHeader</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, loader.o(.text.readSegHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = readSegHeader &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProgram
</UL>

<P><STRONG><a name="[17a]"></a>placeDynamic</STRONG> (Thumb, 200 bytes, Stack size 40 bytes, loader.o(.text.placeDynamic))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = placeDynamic &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProgram
</UL>

<P><STRONG><a name="[17b]"></a>loadSegData</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, loader.o(.text.loadSegData))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = loadSegData &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_CLEAR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpData
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSegment
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadProgram
</UL>

<P><STRONG><a name="[188]"></a>relocate</STRONG> (Thumb, 242 bytes, Stack size 120 bytes, loader.o(.text.relocate))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSymbol
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addressOf
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbol
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSection
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateProgram
</UL>

<P><STRONG><a name="[17e]"></a>readSecHeader</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, loader.o(.text.readSecHeader))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = readSecHeader &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSection
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSection
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
</UL>

<P><STRONG><a name="[17f]"></a>readSectionName</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, loader.o(.text.readSectionName))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSection
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
</UL>

<P><STRONG><a name="[180]"></a>placeInfo</STRONG> (Thumb, 424 bytes, Stack size 32 bytes, loader.o(.text.placeInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 332 + Unknown Stack Size
<LI>Call Chain = placeInfo &rArr; loadSecData &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSymbols
</UL>

<P><STRONG><a name="[18a]"></a>relocateSection</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, loader.o(.text.relocateSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 612<LI>Call Chain = relocateSection &rArr; relocate &rArr; readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSecHeader
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSections
</UL>

<P><STRONG><a name="[177]"></a>freeSegment</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loader.o(.text.freeSegment))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = freeSegment &rArr; Heap_Free &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
</UL>

<P><STRONG><a name="[17d]"></a>dumpData</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, loader.o(.text.dumpData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = dumpData
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSegData
</UL>

<P><STRONG><a name="[185]"></a>readSymbol</STRONG> (Thumb, 146 bytes, Stack size 80 bytes, loader.o(.text.readSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = readSymbol &rArr; readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSection
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbolName
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
</UL>

<P><STRONG><a name="[122]"></a>addressOf</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, loader.o(.text.addressOf))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = addressOf &rArr; sectionOf
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sectionOf
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
</UL>

<P><STRONG><a name="[189]"></a>relocateSymbol</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, loader.o(.text.relocateSymbol))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = relocateSymbol &rArr; relJmpCall
</UL>
<BR>[Calls]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relJmpCall
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocate
</UL>

<P><STRONG><a name="[186]"></a>readSymbolName</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, loader.o(.text.readSymbolName))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = readSymbolName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbol
</UL>

<P><STRONG><a name="[184]"></a>readSection</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, loader.o(.text.readSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = readSection &rArr; readSectionName &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSectionName
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSecHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readSymbol
</UL>

<P><STRONG><a name="[124]"></a>sectionOf</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, loader.o(.text.sectionOf))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = sectionOf
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addressOf
</UL>

<P><STRONG><a name="[18b]"></a>relJmpCall</STRONG> (Thumb, 254 bytes, Stack size 32 bytes, loader.o(.text.relJmpCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = relJmpCall
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;relocateSymbol
</UL>

<P><STRONG><a name="[17c]"></a>loadSecData</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, loader.o(.text.loadSecData))
<BR><BR>[Stack]<UL><LI>Max Depth = 300 + Unknown Stack Size
<LI>Call Chain = loadSecData &rArr; LOADER_READ &rArr; f_read &rArr; get_fat &rArr; move_window &rArr; sync_window &rArr; eDisk_Write &rArr; send_cmd &rArr;  send_cmd (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;f_lseek
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutString
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Malloc
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_CLEAR
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LOADER_READ
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freeSection
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dumpData
</UL>
<BR>[Called By]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;placeInfo
</UL>

<P><STRONG><a name="[176]"></a>freeSection</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, loader.o(.text.freeSection))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = freeSection &rArr; Heap_Free &rArr; OS_Wait &rArr; setAsBlocked &rArr; OS_Suspend
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Heap_Free
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;loadSecData
</UL>

<P><STRONG><a name="[ab]"></a>CANRegWrite</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, can.o(.text.CANRegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegWrite
</UL>

<P><STRONG><a name="[aa]"></a>CANRegRead</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, can.o(.text.CANRegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntEnable
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IntDisable
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANStatusGet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntClear
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANIntEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANBitRateSet
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANEnable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANDataRegRead
</UL>

<P><STRONG><a name="[ae]"></a>CANIntNumberGet</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, can.o(.text.CANIntNumberGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CANIntNumberGet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>

<P><STRONG><a name="[ad]"></a>CANDataRegWrite</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, can.o(.text.CANDataRegWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>

<P><STRONG><a name="[ac]"></a>CANDataRegRead</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, can.o(.text.CANDataRegRead))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = CANDataRegRead &rArr; CANRegRead &rArr; CANIntNumberGet
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANRegRead
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageGet
</UL>

<P><STRONG><a name="[a8]"></a>CAN0_Setup_Message_Object</STRONG> (Thumb, 64 bytes, Stack size 48 bytes, can0.o(.text.CAN0_Setup_Message_Object))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = CAN0_Setup_Message_Object &rArr; CANMessageSet &rArr; CANDataRegWrite &rArr; CANRegWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CANMessageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN0_Open
</UL>

<P><STRONG><a name="[b1]"></a>ESP8266BufferToTx</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266BufferToTx))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266BufferToTx &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutCharNonBlock
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266TxFifo_Size
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266TxFifo_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266_OutChar
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[b5]"></a>ESP8266RxToBuffer</STRONG> (Thumb, 126 bytes, Stack size 16 bytes, esp8266.o(.text.ESP8266RxToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ESP8266RxToBuffer &rArr; UART_OutCharNonBlock &rArr; copySoftwareToHardware &rArr; TxFifo_Get
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_OutCharNonBlock
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ReceiveDataFilter
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxFifo_Size
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ESP8266RxFifo_Put
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART2_Handler
</UL>

<P><STRONG><a name="[18f]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[18e]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>

<P><STRONG><a name="[192]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[191]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0sprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
